// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/services/news/news.proto

package news

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RssID          string   `protobuf:"bytes,1,opt,name=RssID,proto3" json:"RssID,omitempty"`
	Title          string   `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Link           string   `protobuf:"bytes,3,opt,name=Link,proto3" json:"Link,omitempty"`
	ImageURL       string   `protobuf:"bytes,4,opt,name=ImageURL,proto3" json:"ImageURL,omitempty"`
	Author         string   `protobuf:"bytes,5,opt,name=Author,proto3" json:"Author,omitempty"`
	CategorySource string   `protobuf:"bytes,6,opt,name=CategorySource,proto3" json:"CategorySource,omitempty"`
	Category       string   `protobuf:"bytes,7,opt,name=Category,proto3" json:"Category,omitempty"`
	CategoryID     string   `protobuf:"bytes,8,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
	Permalink      string   `protobuf:"bytes,9,opt,name=Permalink,proto3" json:"Permalink,omitempty"`
	Content        string   `protobuf:"bytes,10,opt,name=Content,proto3" json:"Content,omitempty"`
	Source         string   `protobuf:"bytes,11,opt,name=Source,proto3" json:"Source,omitempty"`
	Tags           []string `protobuf:"bytes,12,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Publish        string   `protobuf:"bytes,13,opt,name=Publish,proto3" json:"Publish,omitempty"`
	IsHeadline     string   `protobuf:"bytes,14,opt,name=IsHeadline,proto3" json:"IsHeadline,omitempty"`
	IsPopular      string   `protobuf:"bytes,15,opt,name=IsPopular,proto3" json:"IsPopular,omitempty"`
	Sorting        string   `protobuf:"bytes,16,opt,name=Sorting,proto3" json:"Sorting,omitempty"`
	Exclusive      string   `protobuf:"bytes,17,opt,name=Exclusive,proto3" json:"Exclusive,omitempty"`
}

func (x *NewsRequest) Reset() {
	*x = NewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_news_news_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsRequest) ProtoMessage() {}

func (x *NewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_news_news_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsRequest.ProtoReflect.Descriptor instead.
func (*NewsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_news_news_proto_rawDescGZIP(), []int{0}
}

func (x *NewsRequest) GetRssID() string {
	if x != nil {
		return x.RssID
	}
	return ""
}

func (x *NewsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsRequest) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *NewsRequest) GetImageURL() string {
	if x != nil {
		return x.ImageURL
	}
	return ""
}

func (x *NewsRequest) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NewsRequest) GetCategorySource() string {
	if x != nil {
		return x.CategorySource
	}
	return ""
}

func (x *NewsRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *NewsRequest) GetCategoryID() string {
	if x != nil {
		return x.CategoryID
	}
	return ""
}

func (x *NewsRequest) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *NewsRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewsRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *NewsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NewsRequest) GetPublish() string {
	if x != nil {
		return x.Publish
	}
	return ""
}

func (x *NewsRequest) GetIsHeadline() string {
	if x != nil {
		return x.IsHeadline
	}
	return ""
}

func (x *NewsRequest) GetIsPopular() string {
	if x != nil {
		return x.IsPopular
	}
	return ""
}

func (x *NewsRequest) GetSorting() string {
	if x != nil {
		return x.Sorting
	}
	return ""
}

func (x *NewsRequest) GetExclusive() string {
	if x != nil {
		return x.Exclusive
	}
	return ""
}

type NewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  string  `protobuf:"bytes,1,opt,name=Page,proto3" json:"Page,omitempty"`
	Total string  `protobuf:"bytes,2,opt,name=Total,proto3" json:"Total,omitempty"`
	News  []*News `protobuf:"bytes,3,rep,name=News,proto3" json:"News,omitempty"`
}

func (x *NewsResponse) Reset() {
	*x = NewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_news_news_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsResponse) ProtoMessage() {}

func (x *NewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_news_news_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsResponse.ProtoReflect.Descriptor instead.
func (*NewsResponse) Descriptor() ([]byte, []int) {
	return file_proto_services_news_news_proto_rawDescGZIP(), []int{1}
}

func (x *NewsResponse) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *NewsResponse) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *NewsResponse) GetNews() []*News {
	if x != nil {
		return x.News
	}
	return nil
}

type News struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RssID           string   `protobuf:"bytes,2,opt,name=RssID,proto3" json:"RssID,omitempty"`
	Title           string   `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Cover           string   `protobuf:"bytes,4,opt,name=Cover,proto3" json:"Cover,omitempty"`
	Link            string   `protobuf:"bytes,5,opt,name=Link,proto3" json:"Link,omitempty"`
	Author          string   `protobuf:"bytes,6,opt,name=Author,proto3" json:"Author,omitempty"`
	CategorySource  string   `protobuf:"bytes,7,opt,name=CategorySource,proto3" json:"CategorySource,omitempty"`
	Category        string   `protobuf:"bytes,8,opt,name=Category,proto3" json:"Category,omitempty"`
	CategoryID      string   `protobuf:"bytes,9,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
	PubDate         string   `protobuf:"bytes,10,opt,name=PubDate,proto3" json:"PubDate,omitempty"`
	Permalink       string   `protobuf:"bytes,11,opt,name=Permalink,proto3" json:"Permalink,omitempty"`
	Content         string   `protobuf:"bytes,12,opt,name=Content,proto3" json:"Content,omitempty"`
	Source          string   `protobuf:"bytes,13,opt,name=Source,proto3" json:"Source,omitempty"`
	Tags            []string `protobuf:"bytes,14,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Description     string   `protobuf:"bytes,15,opt,name=Description,proto3" json:"Description,omitempty"`
	Publish         string   `protobuf:"bytes,16,opt,name=Publish,proto3" json:"Publish,omitempty"`
	IsHeadLine      string   `protobuf:"bytes,17,opt,name=IsHeadLine,proto3" json:"IsHeadLine,omitempty"`
	Count           string   `protobuf:"bytes,18,opt,name=Count,proto3" json:"Count,omitempty"`
	ShareLink       string   `protobuf:"bytes,19,opt,name=ShareLink,proto3" json:"ShareLink,omitempty"`
	GaPartnerID     string   `protobuf:"bytes,20,opt,name=GaPartnerID,proto3" json:"GaPartnerID,omitempty"`
	Exclusive       string   `protobuf:"bytes,21,opt,name=Exclusive,proto3" json:"Exclusive,omitempty"`
	GoogleIndex     string   `protobuf:"bytes,22,opt,name=GoogleIndex,proto3" json:"GoogleIndex,omitempty"`
	CountryID       string   `protobuf:"bytes,23,opt,name=CountryID,proto3" json:"CountryID,omitempty"`
	PublisherID     string   `protobuf:"bytes,24,opt,name=PublisherID,proto3" json:"PublisherID,omitempty"`
	CountryName     string   `protobuf:"bytes,25,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	TotalLike       string   `protobuf:"bytes,26,opt,name=TotalLike,proto3" json:"TotalLike,omitempty"`
	Image           string   `protobuf:"bytes,27,opt,name=Image,proto3" json:"Image,omitempty"`
	Pinned          string   `protobuf:"bytes,28,opt,name=Pinned,proto3" json:"Pinned,omitempty"`
	Sorting         string   `protobuf:"bytes,29,opt,name=Sorting,proto3" json:"Sorting,omitempty"`
	TotalViews      string   `protobuf:"bytes,30,opt,name=TotalViews,proto3" json:"TotalViews,omitempty"`
	MetaTitle       string   `protobuf:"bytes,31,opt,name=MetaTitle,proto3" json:"MetaTitle,omitempty"`
	MetaDescription string   `protobuf:"bytes,32,opt,name=MetaDescription,proto3" json:"MetaDescription,omitempty"`
	MetaKeyword     string   `protobuf:"bytes,33,opt,name=MetaKeyword,proto3" json:"MetaKeyword,omitempty"`
	CreatedAt       string   `protobuf:"bytes,34,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	PublishDate     string   `protobuf:"bytes,35,opt,name=PublishDate,proto3" json:"PublishDate,omitempty"`
	DeepLink        string   `protobuf:"bytes,36,opt,name=DeepLink,proto3" json:"DeepLink,omitempty"`
}

func (x *News) Reset() {
	*x = News{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_news_news_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *News) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*News) ProtoMessage() {}

func (x *News) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_news_news_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use News.ProtoReflect.Descriptor instead.
func (*News) Descriptor() ([]byte, []int) {
	return file_proto_services_news_news_proto_rawDescGZIP(), []int{2}
}

func (x *News) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *News) GetRssID() string {
	if x != nil {
		return x.RssID
	}
	return ""
}

func (x *News) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *News) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *News) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *News) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *News) GetCategorySource() string {
	if x != nil {
		return x.CategorySource
	}
	return ""
}

func (x *News) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *News) GetCategoryID() string {
	if x != nil {
		return x.CategoryID
	}
	return ""
}

func (x *News) GetPubDate() string {
	if x != nil {
		return x.PubDate
	}
	return ""
}

func (x *News) GetPermalink() string {
	if x != nil {
		return x.Permalink
	}
	return ""
}

func (x *News) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *News) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *News) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *News) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *News) GetPublish() string {
	if x != nil {
		return x.Publish
	}
	return ""
}

func (x *News) GetIsHeadLine() string {
	if x != nil {
		return x.IsHeadLine
	}
	return ""
}

func (x *News) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *News) GetShareLink() string {
	if x != nil {
		return x.ShareLink
	}
	return ""
}

func (x *News) GetGaPartnerID() string {
	if x != nil {
		return x.GaPartnerID
	}
	return ""
}

func (x *News) GetExclusive() string {
	if x != nil {
		return x.Exclusive
	}
	return ""
}

func (x *News) GetGoogleIndex() string {
	if x != nil {
		return x.GoogleIndex
	}
	return ""
}

func (x *News) GetCountryID() string {
	if x != nil {
		return x.CountryID
	}
	return ""
}

func (x *News) GetPublisherID() string {
	if x != nil {
		return x.PublisherID
	}
	return ""
}

func (x *News) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *News) GetTotalLike() string {
	if x != nil {
		return x.TotalLike
	}
	return ""
}

func (x *News) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *News) GetPinned() string {
	if x != nil {
		return x.Pinned
	}
	return ""
}

func (x *News) GetSorting() string {
	if x != nil {
		return x.Sorting
	}
	return ""
}

func (x *News) GetTotalViews() string {
	if x != nil {
		return x.TotalViews
	}
	return ""
}

func (x *News) GetMetaTitle() string {
	if x != nil {
		return x.MetaTitle
	}
	return ""
}

func (x *News) GetMetaDescription() string {
	if x != nil {
		return x.MetaDescription
	}
	return ""
}

func (x *News) GetMetaKeyword() string {
	if x != nil {
		return x.MetaKeyword
	}
	return ""
}

func (x *News) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *News) GetPublishDate() string {
	if x != nil {
		return x.PublishDate
	}
	return ""
}

func (x *News) GetDeepLink() string {
	if x != nil {
		return x.DeepLink
	}
	return ""
}

type GetNewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  string `protobuf:"bytes,1,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Offset string `protobuf:"bytes,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *GetNewsRequest) Reset() {
	*x = GetNewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_news_news_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsRequest) ProtoMessage() {}

func (x *GetNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_news_news_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsRequest.ProtoReflect.Descriptor instead.
func (*GetNewsRequest) Descriptor() ([]byte, []int) {
	return file_proto_services_news_news_proto_rawDescGZIP(), []int{3}
}

func (x *GetNewsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GetNewsRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

type TotalNews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total string `protobuf:"bytes,1,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *TotalNews) Reset() {
	*x = TotalNews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_services_news_news_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalNews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalNews) ProtoMessage() {}

func (x *TotalNews) ProtoReflect() protoreflect.Message {
	mi := &file_proto_services_news_news_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalNews.ProtoReflect.Descriptor instead.
func (*TotalNews) Descriptor() ([]byte, []int) {
	return file_proto_services_news_news_proto_rawDescGZIP(), []int{4}
}

func (x *TotalNews) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

var File_proto_services_news_news_proto protoreflect.FileDescriptor

var file_proto_services_news_news_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2f, 0x6e, 0x65, 0x77, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x03, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x73, 0x73, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x52, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x50, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49,
	0x73, 0x48, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x73,
	0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22,
	0x58, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x65, 0x77,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x4e,
	0x65, 0x77, 0x73, 0x52, 0x04, 0x4e, 0x65, 0x77, 0x73, 0x22, 0x86, 0x08, 0x0a, 0x04, 0x4e, 0x65,
	0x77, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x52, 0x73, 0x73, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x62, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x48, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x49, 0x73, 0x48, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x61, 0x50, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x6b, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x69, 0x6b, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69,
	0x6e, 0x6b, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x65, 0x70, 0x4c, 0x69,
	0x6e, 0x6b, 0x22, 0x3e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x21, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x77, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xb4, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73,
	0x12, 0x14, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x4e, 0x65,
	0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x65, 0x77, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x73, 0x12, 0x11, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x2b, 0x5a, 0x29,
	0x66, 0x61, 0x6c, 0x74, 0x61, 0x72, 0x2d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x6e, 0x65, 0x77, 0x73, 0x3b, 0x6e, 0x65, 0x77, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_services_news_news_proto_rawDescOnce sync.Once
	file_proto_services_news_news_proto_rawDescData = file_proto_services_news_news_proto_rawDesc
)

func file_proto_services_news_news_proto_rawDescGZIP() []byte {
	file_proto_services_news_news_proto_rawDescOnce.Do(func() {
		file_proto_services_news_news_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_services_news_news_proto_rawDescData)
	})
	return file_proto_services_news_news_proto_rawDescData
}

var file_proto_services_news_news_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_services_news_news_proto_goTypes = []interface{}{
	(*NewsRequest)(nil),    // 0: post.NewsRequest
	(*NewsResponse)(nil),   // 1: post.NewsResponse
	(*News)(nil),           // 2: post.News
	(*GetNewsRequest)(nil), // 3: post.GetNewsRequest
	(*TotalNews)(nil),      // 4: post.TotalNews
	(*emptypb.Empty)(nil),  // 5: google.protobuf.Empty
}
var file_proto_services_news_news_proto_depIdxs = []int32{
	2, // 0: post.NewsResponse.News:type_name -> post.News
	3, // 1: post.NewsService.GetNews:input_type -> post.GetNewsRequest
	5, // 2: post.NewsService.GetTotalNews:input_type -> google.protobuf.Empty
	0, // 3: post.NewsService.CreateNews:input_type -> post.NewsRequest
	1, // 4: post.NewsService.GetNews:output_type -> post.NewsResponse
	4, // 5: post.NewsService.GetTotalNews:output_type -> post.TotalNews
	5, // 6: post.NewsService.CreateNews:output_type -> google.protobuf.Empty
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_services_news_news_proto_init() }
func file_proto_services_news_news_proto_init() {
	if File_proto_services_news_news_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_services_news_news_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_news_news_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_news_news_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*News); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_news_news_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_services_news_news_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalNews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_services_news_news_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_services_news_news_proto_goTypes,
		DependencyIndexes: file_proto_services_news_news_proto_depIdxs,
		MessageInfos:      file_proto_services_news_news_proto_msgTypes,
	}.Build()
	File_proto_services_news_news_proto = out.File
	file_proto_services_news_news_proto_rawDesc = nil
	file_proto_services_news_news_proto_goTypes = nil
	file_proto_services_news_news_proto_depIdxs = nil
}
